//--------------开关按钮-------------------
// 1.需修改的位置编号：L321632
// 2.参考素材在附件
// 3.布局：1.主页布局
// 4.	   2.自定义属性声明 attrs.xml
// 5.按钮 MyToggleButton.java
// 6.主要步奏：
//		自定义类继承View
//		重写onMeasure方法，指定控件大小
//		重写onDraw方法，绘制控件内容
//		重写onTouchEvent方法，对touch事件进行解析
// 7.改控件已经实现自定义属性
//----------Luzhuo-write-----------


//-------------------主页布局--------------------
// 1.文件名：activity_main.xml
// 2.控件类：
//	<com.example.togglebtn.MyToggleButton
// 3.自定义属性：
//	命名空间	xmlns:anniu="http://schemas.android.com/apk/res/com.example.togglebtn" 
//	按钮背景	anniu:my_background="@drawable/switch_background" 
//	按钮		anniu:my_slide_btn="@drawable/slide_button"
//	默认开关	anniu:curr_state="true"  
//========================================

<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:anniu="http://schemas.android.com/apk/res/com.example.togglebtn"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context="com.example.togglebutton.MainActivity" >  //L321632

    <com.example.togglebutton.MyToggleButton	//L321632 控件类的全路径名
        android:id="@+id/my_toggle_btn"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_centerHorizontal="true"
        android:layout_centerVertical="true"
        anniu:my_background="@drawable/switch_background"  	//L321632
        anniu:my_slide_btn="@drawable/slide_button"  		//L321632
        anniu:curr_state="true" 		 //L321632
         />

</RelativeLayout>

//========================================


//-------------------自定义属性声明--------------------
// 1.文件名：attrs.xml
// 2.文件放置于res/values目录下
// 3.属性：
//	声明名称		<declare-styleable name="MyToggleBtn">
//	声明属性及引用类型	<attr name="my_background" format="reference"/>
//========================================

<?xml version="1.0" encoding="utf-8"?>
<resources>
    <declare-styleable name="MyToggleBtn">	  //L321632 一般与类同名
        <attr name="my_background" format="reference"/>  //L321632 
        <attr name="my_slide_btn" format="reference"/>  //L321632 
        <attr name="curr_state" format="boolean"/>  //L321632 
    </declare-styleable>
</resources>

//========================================






//----------------------------------------------------
// 1.文件名：MyToggleButton.java
// 2.主要步奏：
//		1.自定义类继承View，初始化数据
//		2.重写onMeasure方法，指定控件大小
//		3.重写onDraw方法，绘制控件内容
//		4.重写onTouchEvent方法，对touch事件进行解析
// 3.注意：类继承View
//		extends View
//	   实现点击监听
//		implements OnClickListener
//=================MyToggleButton=======================

//===================成员变量=====================
	
	private Bitmap backgroundBitmap; //做为背景的图片
	private Bitmap slideBtn; //可以滑动的图片
	private Paint paint;
	private float slideBtn_left; //滑动按钮的左边界
	private int backgroundId;//背景图的资源id
	private int slideBtnId;//滑动图片的资源id
	private boolean currState = false;  //当前开关的状态 true为开
	private boolean isDrag = false;	//判断是否发生拖动,如果拖动了，就不在响应onclick事件

//-----------------------------------------------------
// 1.构造方法中获取属性
//==================主体方法，获取自定义属性======================

	public MyToggleButton(Context context, AttributeSet attrs) {
		super(context, attrs);
		
		//获得自定义的属性
		TypedArray ta = context.obtainStyledAttributes(attrs, R.styleable.MyToggleBtn);   //L321632 attrs定义的名
		int N = ta.getIndexCount();
		for (int i = 0; i < N; i++) {
			//获得某个属性的id值
			int itemId = ta.getIndex(i);
			switch (itemId) {
			case R.styleable.MyToggleBtn_curr_state: 	 //L321632 
				currState = ta.getBoolean(itemId, false);  //L321632 获取其值
				break;

			case R.styleable.MyToggleBtn_my_background:	 //L321632 
				backgroundId = ta.getResourceId(itemId, -1);  //L321632 获取其值
				if(backgroundId==-1){
					throw new RuntimeException("请设置背景图片");
				}
				backgroundBitmap =  BitmapFactory.decodeResource(getResources(), backgroundId);
				break;
				
			case R.styleable.MyToggleBtn_my_slide_btn:	 //L321632 
				slideBtnId = ta.getResourceId(itemId, -1);  //L321632 获取其值
				slideBtn =  BitmapFactory.decodeResource(getResources(), slideBtnId);
				break;
			}
		}
		initView();
	}

//================initView()========================

	//初始化
	private void initView() {
		//初始化图片
		//backgroundBitmap = BitmapFactory.decodeResource(getResources(), R.drawable.switch_background);  //定义背景图片
		//slideBtn = BitmapFactory.decodeResource(getResources(), R.drawable.slide_button);  //定义按钮图片
		
		//初始化画笔
		paint = new Paint();
		paint.setAntiAlias(true); //打开抗锯齿
		
		//添加onclick事件监听
		setOnClickListener(this);
		
		flashState();
	}

//========================================


//-----------------------------------------------------
// 2.重写onMeasure方法，指定控件大小
//========================================

	protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
		//设置当前view的大小
		//width：view的宽度	height：view的高度  (单位：像素)
		setMeasuredDimension(backgroundBitmap.getWidth(), backgroundBitmap.getHeight());
	}

//========================================


//-----------------------------------------------------
// 3.重写onDraw方法，绘制控件内容
//========================================

	//绘制当前view的内容
	protected void onDraw(Canvas canvas) {
		canvas.drawBitmap(backgroundBitmap, 0, 0, paint); //绘制背景
		canvas.drawBitmap(slideBtn, slideBtn_left, 0, paint); //绘制可滑动的按钮
	}

//========================================

//==================监听拖动事件======================

	public void onClick(View v) {
		//如果没有拖动，才执行改变状态的动作
		if(!isDrag){
			currState = !currState;
			flashState();
		}
	}

//========================================

//-----------------------------------------------------
// 4.重写onTouchEvent方法，对touch事件进行解析
//========================================

	private int firstX;  //down事件时的x值
	private int lastX;  //touch事件的上一个x值
	@Override
	public boolean onTouchEvent(MotionEvent event) {
		super.onTouchEvent(event);
		switch (event.getAction()) {
		case MotionEvent.ACTION_DOWN:
			firstX = lastX = (int) event.getX();
			isDrag = false;
			break;

		case MotionEvent.ACTION_MOVE:
			//判断是否发生拖动
			if(Math.abs(event.getX()-firstX)>5){
				isDrag = true;
			}
			
			//计算手指在屏幕上移动的距离
			int dis = (int) (event.getX()-lastX);
			//将本次的位置设置给lastX
			lastX = (int) event.getX();
			//根据手指移动的距离，改变slideBtn_left的值
			slideBtn_left = slideBtn_left+dis;
			break;
			
		case MotionEvent.ACTION_UP:
			//在发生拖动的情况下，根据最后的位置，判断当前开关的状态
			if (isDrag) {
				int maxLeft = backgroundBitmap.getWidth()-slideBtn.getWidth();  //slideBtn左边界最大值
				
				//根据slideBtn_left判断，当前应是什么状态
				if (slideBtn_left>maxLeft/2) { //此时应为打开的状态
					currState = true;
				}else{
					currState = false;
				}
				flashState();
			}
			break;
		}
		flushView();
		return true;
	}

//========================================

//=================flashState();=======================

	//刷新当前状态
	private void flashState() {
		if(currState){
			slideBtn_left = backgroundBitmap.getWidth()-slideBtn.getWidth();
		}else{
			slideBtn_left = 0;
		}
		flushView();
	}

//========================================

//=================flushView()=======================

	//刷新当前视图
	private void flushView() {
		//对slideBtn_left的值进行判断，确保在很里的位置 即 0<=slideBtn_left<=maxLeft
		int maxLeft = backgroundBitmap.getWidth()-slideBtn.getWidth();  //slideBtn左边界最大值
		//确保slideBtn_left>=0
		slideBtn_left = (slideBtn_left>0)?slideBtn_left:0;
		//确保slideBtn_left<=maxLeft
		slideBtn_left = (slideBtn_left<maxLeft)?slideBtn_left:maxLeft;
		
		//刷新当前视图，导致执行onDraw执行
		invalidate();
	}

//========================================